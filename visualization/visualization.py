import pandas as pd
import plotly.graph_objects as go
from sqlalchemy import create_engine
import warnings

# –ü–æ–¥–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è pandas
warnings.filterwarnings('ignore', message='pandas only supports SQLAlchemy connectable')


class SimpleBitcoinChart:
    def __init__(self, db_config):
        """–ü—Ä–æ—Å—Ç–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ PostgreSQL"""
        self.db_url = f"postgresql://{db_config['user']}:{db_config['password']}@{db_config['host']}:{db_config['port']}/{db_config['database']}"
        self.engine = create_engine(self.db_url)
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

    def get_data(self, limit=1000):
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î (–ø–æ—Å–ª–µ–¥–Ω–∏–µ N –∑–∞–ø–∏—Å–µ–π)"""
        try:
            # –ü—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± - –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —á–∏—Å–ª–æ –ø—Ä—è–º–æ –≤ –∑–∞–ø—Ä–æ—Å
            query = f"""
                SELECT timestamp, price
                FROM bitcoin_prices
                ORDER BY timestamp DESC
                LIMIT {limit}
            """

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º engine –Ω–∞–ø—Ä—è–º—É—é
            df = pd.read_sql(query, self.engine)

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            df = df.sort_values('timestamp').reset_index(drop=True)
            df['timestamp'] = pd.to_datetime(df['timestamp'])

            print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π")
            return df

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            print("üîß –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±...")
            return self._get_data_alternative(limit)

    def create_chart(self, df):
        """–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π –ª–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫"""
        if df is None or df.empty:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞")
            return None

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –ª–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
        fig = go.Figure()

        fig.add_trace(go.Scatter(
            x=df['timestamp'],
            y=df['price'],
            mode='lines',
            name='Bitcoin Price',
            line=dict(color='#f7931a', width=2),  # –ë–∏—Ç–∫–æ–∏–Ω –æ—Ä–∞–Ω–∂–µ–≤—ã–π
            hovertemplate='<b>$%{y:,.2f}</b><br>%{x}<extra></extra>'
        ))

        # –ü—Ä–æ—Å—Ç—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        fig.update_layout(
            title="Bitcoin Price Chart",
            xaxis_title="–í—Ä–µ–º—è",
            yaxis_title="–¶–µ–Ω–∞ (USD)",
            template="plotly_dark",
            height=600,
            showlegend=False
        )

        return fig

    def show_stats(self, df):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Å—Ç—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        if df is None or df.empty:
            return

        current_price = df['price'].iloc[-1]
        min_price = df['price'].min()
        max_price = df['price'].max()
        first_price = df['price'].iloc[0]

        change = current_price - first_price
        change_pct = (change / first_price) * 100

        print("\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê BITCOIN:")
        print(f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:,.2f}")
        print(f"üìä –ú–∏–Ω: ${min_price:,.2f} | –ú–∞–∫—Å: ${max_price:,.2f}")
        print(f"üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: ${change:+,.2f} ({change_pct:+.2f}%)")
        print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {df['timestamp'].iloc[0]} - {df['timestamp'].iloc[-1]}")

    def _get_data_alternative(self, limit):
        """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ psycopg2"""
        try:
            import psycopg2

            # –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            conn = psycopg2.connect(
                host='localhost',
                port='5432',
                database='postgres',
                user='postgres',
                password='192021'
            )

            query = """
                    SELECT timestamp, price
                    FROM bitcoin_prices
                    ORDER BY timestamp DESC
                        LIMIT %s \
                    """

            df = pd.read_sql(query, conn, params=(limit,))
            conn.close()

            df = df.sort_values('timestamp').reset_index(drop=True)
            df['timestamp'] = pd.to_datetime(df['timestamp'])

            print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±)")
            return df

        except Exception as e:
            print(f"‚ùå –ò –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")
            return None


# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥
if __name__ == "__main__":

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    DB_CONFIG = {
        'user': 'postgres',
        'password': '192021',
        'host': 'localhost',
        'port': '5432',
        'database': 'postgres'
    }

    # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä
    chart = SimpleBitcoinChart(DB_CONFIG)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 –∑–∞–ø–∏—Å–µ–π)
    data = chart.get_data(limit=1000)

    if data is not None:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        chart.show_stats(data)

        # –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        print("\nüìà –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫...")
        bitcoin_chart = chart.create_chart(data)

        if bitcoin_chart:
            bitcoin_chart.show()  # –û—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ
            print("‚úÖ –ì—Ä–∞—Ñ–∏–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω!")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫")
    else:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")

print("\nüìã –î–ª—è —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω—ã: pip install plotly pandas sqlalchemy psycopg2-binary")