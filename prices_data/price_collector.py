import requests
import pandas as pd
from sqlalchemy import create_engine, text
from datetime import datetime
import time


def get_bitcoin_price():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É Bitcoin —Å Binance API"""
    try:
        url = "https://api.binance.com/api/v3/ticker/price?symbol=BTCUSDT"
        response = requests.get(url, timeout=10)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ HTTP –æ—à–∏–±–∫–∏
        data = response.json()
        price = float(data['price'])
        print(f"BTC Price: ${price}")
        return price
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã: {e}")
        return None


def save_to_database(price, engine):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ü–µ–Ω—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        current_time = datetime.now()

        # SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ (—Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è –∏ —Ü–µ–Ω–∞)
        query = text("""
                     INSERT INTO bitcoin_prices (timestamp, price)
                     VALUES (:timestamp, :price)
                     """)

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –∞–≤—Ç–æ–∫–æ–º–º–∏—Ç–æ–º
        with engine.begin() as conn:  # begin() –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–µ–ª–∞–µ—Ç commit
            conn.execute(query, {
                'timestamp': current_time,
                'price': price
            })

        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: ${price} –≤ {current_time.strftime('%H:%M:%S')}")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        return False


def create_table_if_not_exists(engine):
    """–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
    try:
        create_table_query = text("""
                                  CREATE TABLE IF NOT EXISTS bitcoin_prices
                                  (
                                      id
                                      SERIAL
                                      PRIMARY
                                      KEY,
                                      timestamp
                                      TIMESTAMP
                                      DEFAULT
                                      CURRENT_TIMESTAMP,
                                      price
                                      DECIMAL
                                  (
                                      12,
                                      2
                                  ) NOT NULL
                                      )
                                  """)

        with engine.begin() as conn:
            conn.execute(create_table_query)

        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")
        return False


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
DB_CONFIG = {
    'user': 'postgres',  # –≤–∞—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    'password': '192021',  # –≤–∞—à –ø–∞—Ä–æ–ª—å
    'host': 'localhost',  # –∏–ª–∏ IP —Å–µ—Ä–≤–µ—Ä–∞
    'port': '5432',  # –ø–æ—Ä—Ç PostgreSQL
    'database': 'postgres'  # –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –ë–î
}

# –°—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
db_url = f"postgresql://{DB_CONFIG['user']}:{DB_CONFIG['password']}@{DB_CONFIG['host']}:{DB_CONFIG['port']}/{DB_CONFIG['database']}"

# –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫ SQLAlchemy
try:
    engine = create_engine(db_url, echo=False)  # echo=True –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ SQL

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    with engine.connect() as conn:
        conn.execute(text("SELECT 1"))

    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ")

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if not create_table_if_not_exists(engine):
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É")
        exit(1)

except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
    exit(1)

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
y = 0
x = 10000
errors = 0

print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö. –ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è —Å–æ–±—Ä–∞—Ç—å {x} –∑–∞–ø–∏—Å–µ–π")

for i in range(x):
    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É
    current_price = get_bitcoin_price()

    if current_price is None:
        errors += 1
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å. –û—à–∏–±–æ–∫: {errors}")
        time.sleep(5)  # –ë–æ–ª—å—à–µ –∂–¥–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
        continue

    y += 1

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î
    if save_to_database(current_price, engine):
        print(f"Number: {y} ------- ${current_price} ‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ –≤ –ë–î")
    else:
        print(f"Number: {y} ------- ${current_price} ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏")
        errors += 1

    if y >= x:
        break

    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    time.sleep(1)

print(f"üéâ –ó–∞–≤–µ—Ä—à–µ–Ω–æ! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {y} –∑–∞–ø–∏—Å–µ–π, –æ—à–∏–±–æ–∫: {errors}")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
try:
    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    query = text("SELECT COUNT(*) as count FROM bitcoin_prices")
    with engine.connect() as conn:
        result = conn.execute(query).fetchone()
        print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –ë–î: {result[0]}")

    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π
    query = text("""
                 SELECT price, timestamp
                 FROM bitcoin_prices
                 ORDER BY timestamp DESC
                     LIMIT 5
                 """)

    with engine.connect() as conn:
        result = conn.execute(query)
        print("\nüìà –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π:")
        for row in result:
            print(f"${row[0]} - {row[1]}")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ—Å—Å–∏—é
    if y > 0:
        query = text("""
                     SELECT MIN(price) as min_price,
                            MAX(price) as max_price,
                            AVG(price) as avg_price
                     FROM bitcoin_prices
                     WHERE timestamp >= NOW() - INTERVAL '1 hour'
                     """)

        with engine.connect() as conn:
            result = conn.execute(query).fetchone()
            if result[0]:  # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
                print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å:")
                print(f"   –ú–∏–Ω: ${result[0]:.2f}")
                print(f"   –ú–∞–∫—Å: ${result[1]:.2f}")
                print(f"   –°—Ä–µ–¥–Ω–µ–µ: ${result[2]:.2f}")

except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

finally:
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    engine.dispose()
    print("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ")