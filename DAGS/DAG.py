from datetime import datetime, timedelta
from airflow import DAG
# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏–π Airflow
from airflow.providers.standard.operators.python import PythonOperator
from airflow.providers.postgres.hooks.postgres import PostgresHook
import pandas as pd
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ DAG
default_args = {
    'owner': 'data_engineer',
    'depends_on_past': False,
    'start_date': datetime(2024, 1, 1),
    'email_on_failure': False,
    'retries': 2,
    'retry_delay': timedelta(minutes=1),
    'catchup': False
}


def simple_transfer_all_in_one(**context):
    """–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è - –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π"""

    source_hook = PostgresHook(postgres_conn_id='source_postgres_conn')
    target_hook = PostgresHook(postgres_conn_id='target_postgres_conn')

    logging.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —É–ª—å—Ç—Ä–∞-–ø—Ä–æ—Å—Ç–æ–π –ø–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö...")

    # 1. –°–æ–∑–¥–∞—Ç—å —Ü–µ–ª–µ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
    target_hook.run("""
                    CREATE TABLE IF NOT EXISTS bitcoin_archive
                    (
                        id
                        SERIAL
                        PRIMARY
                        KEY,
                        timestamp
                        TIMESTAMP,
                        price
                        DECIMAL
                    (
                        12,
                        2
                    ),
                        transferred_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                        )
                    """)

    # 2. –í–∑—è—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ (—Å ID –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è)
    df = source_hook.get_pandas_df("SELECT id, timestamp, price FROM bitcoin_prices ORDER BY timestamp")

    if df.empty:
        logging.info("‚è≠Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞")
        return

    logging.info(f"üìä –ó–∞–±–∏—Ä–∞–µ–º {len(df)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    record_ids = df['id'].tolist()

    # –î–ª—è –≤—Å—Ç–∞–≤–∫–∏ –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ timestamp –∏ price
    insert_df = df[['timestamp', 'price']].copy()

    # 3. –í—Å—Ç–∞–≤–∏—Ç—å –≤ —Ü–µ–ª–µ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
    engine = target_hook.get_sqlalchemy_engine()
    insert_df.to_sql('bitcoin_archive', engine, if_exists='append', index=False)

    logging.info(f"üì§ –í—Å—Ç–∞–≤–ª–µ–Ω–æ {len(insert_df)} –∑–∞–ø–∏—Å–µ–π –≤ –∞—Ä—Ö–∏–≤")

    # 4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤—Å—Ç–∞–≤–∏–ª–∏—Å—å
    inserted = target_hook.get_first(
        "SELECT COUNT(*) FROM bitcoin_archive WHERE transferred_at >= NOW() - INTERVAL '2 minutes'"
    )[0]

    if inserted >= len(df):
        # 5. –ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª–∏—Ç—å –¢–û–õ–¨–ö–û —Ç–µ –∑–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –∑–∞–±—Ä–∞–ª–∏
        ids_str = ','.join(map(str, record_ids))
        delete_sql = f"DELETE FROM bitcoin_prices WHERE id IN ({ids_str})"

        deleted_count = source_hook.run(delete_sql)
        logging.info(f"üóëÔ∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª–µ–Ω–æ {len(record_ids)} –∑–∞–ø–∏—Å–µ–π –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã")
        logging.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π!")

        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        remaining = source_hook.get_first("SELECT COUNT(*) FROM bitcoin_prices")[0]
        total_archive = target_hook.get_first("SELECT COUNT(*) FROM bitcoin_archive")[0]

        logging.info(f"üìä –ò–¢–û–ì: –û—Å—Ç–∞–ª–æ—Å—å –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–µ: {remaining}, –í—Å–µ–≥–æ –≤ –∞—Ä—Ö–∏–≤–µ: {total_archive}")

    else:
        raise ValueError(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏! –û–∂–∏–¥–∞–ª–æ—Å—å {len(df)}, –Ω–∞–π–¥–µ–Ω–æ {inserted}")


# –°–æ–∑–¥–∞–Ω–∏–µ DAG (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏–π Airflow)
simple_dag = DAG(
    'ultra_simple_bitcoin_transfer',
    default_args=default_args,
    description='Ultra simple Bitcoin transfer every 15 minutes',
    schedule=timedelta(minutes=15),  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å schedule_interval –Ω–∞ schedule
    max_active_runs=1,
    tags=['bitcoin', 'simple', 'transfer']
)

# –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞
simple_task = PythonOperator(
    task_id='transfer_all',
    python_callable=simple_transfer_all_in_one,
    dag=simple_dag
)